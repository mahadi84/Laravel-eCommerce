
==============Configuration========================================

--- add into .env(for testing) -------------

MAIL_MAILER=smtp
MAIL_HOST=sandbox.smtp.mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=16aa8ca8949985
MAIL_PASSWORD=6b2fc1a93d5eb9

-----------------MailHelper(I create it manually inside helpers folder, to overwrite email config info for .env file)---------
<?php
namespace App\Helpers;
use App\Models\EmailConfiguration;

class MailHelper{
        public static function setEmailConfig(){
            $emailconfig= EmailConfiguration::first();
                $config=[    
                    'transport' => 'smtp',
                    'url'       => env('MAIL_URL'),
                    'host'      => $emailconfig->host,
                    'port'      => $emailconfig->port,
                    'encryption'=> $emailconfig->encryption,
                    'username'  => $emailconfig->username,
                    'password'  => $emailconfig->password,
                    'timeout'   => null,
                    'local_domain' => env('MAIL_EHLO_DOMAIN')
                ];
            config(['mail.mailers.smtp'=>$config]);
            config(['mail.from.address'=> $emailconfig->email]);
        }


}

========================= ROUTE, CONTROLLER AND SETTINGS ============================
ROUTE: Route::post('handle-contact-form', [PageController::class, 'handleContactForm'])->name('handle-contact-form');

CONTROLLER:
use App\Models\EmailConfiguration;
use App\Helpers\MailHelper;
use Illuminate\Support\Facades\Mail;

 public function handleContactForm(Request $request){
        $data= $request->validate([
            'name' => ['required', 'max:200'],
            'email' => ['required', 'email'],
            'subject' => ['required', 'max:200'],
            'message' => ['required', 'max:1000']
        ]);


       $mailInfo = ContactUs::Create($data);

        // Assigned my MAILTRAP email connection info like smtp info, username, password.
        MailHelper::setEmailConfig(); 
        //get my email address from where mail will sent(this model directly store MAILTRAP email connection info like smtp info, username, password, etc and COMPANY EMAIL ADDRESS).
        $setting = EmailConfiguration::first(); 
        //Contact Class (php artisan make:mail Contact) in Mail Folder
        Mail::to($mailInfo->email)->send(new Contact($mailInfo); 

        return response(['status' => 'success', 'message' => 'Mail sent successfully!']);

    }



-----------------Contact Class (php artisan make:mail Contact) located in Mail Folder--------------------- 
****** DO NOT USE ANY VARIABLE NAME $message, IT WILL CONFLICT WITH OTHERS. ****
    
        public $mailInfo;

    // Create a new message instance
    public function __construct($mailInfo){
        $this->mailInfo=$mailInfo;
    }

    // Get the message envelope
    public function envelope(): Envelope{
        return new Envelope(
            subject: $this->mailInfo->subject,
        );
    }

    // Get the message content definition.
    public function content(): Content{
        return new Content(
            view: 'Mail.contact',
        );
    }

=================== Mail/contact.blade.php============================

            Hello {{$mailInfo->name}},<br>
            We have received your query and will get back to you soon to {{$mailInfo->email}}. <br><br>
            
            Thanks,<br><br>
            
            Web Development Team, <br>
            Dhaka, Bangladesh<br>
            <a href="{{url('/')}}">www.company.com</a><br><br><br>

            ========= Your Query/Message  =========<br><br>
            "{{$mailInfo->message}}"
            
            

====================Contact-Form (BLADE) WITH AJAX-JQUERY===========================
add into master.blade.php: <meta name="csrf-token" content="{{ csrf_token() }}" />

<h5>Send Us a Message</h5>
<form id="contact-form">                    
    <div class="mb-3">        
        <input type="text"  class="form-control" placeholder="Your Name" name="name">
    </div>
    <div class="mb-3">
        <input type="email"  class="form-control" placeholder="Email" name="email">
    </div>
    <div class="mb-3">
        <input type="text"  class="form-control" placeholder="Subject" name="subject">
    </div>
    <div class="mb-3">
        <textarea cols="3" rows="5"  class="form-control" placeholder="Message" name="message"></textarea>
    </div>        
    <div class="d-grid gap-2 d-md-flex justify-content-md-center">
        <button type="submit" class="btn btn-secondary common_btn" id="form-submit">send now</button>
    </div>
</form>

CONTROLLER RESPONSE:  return response(['status'=> 'success', 'message' => 'We have received your query and will get back to you.']);

@push('scripts')
<script>

$(document).ready(function(){ 
        $.ajaxSetup({
            headers: {'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')}
        })

            $('#contact-form').on('submit', function(e){
                e.preventDefault();
                let data = $(this).serialize();
                $.ajax({
                    method: 'POST',
                    url: "{{route('contact.create')}}",
                    data: data,
                    beforeSend: function(){
                        $('#form-submit').text('Sending..');
                        $('#form-submit').attr('disabled', true);
                    },
                    success: function(data){
                        if(data.status == 'success'){
                            toastr.success(data.message);
                            $('#contact-form')[0].reset();
                            $('#form-submit').text('Send')
                            $('#form-submit').attr('disabled', false);
                        }
                    },
                    error: function(data){
                        let errors = data.responseJSON.errors;

                        $.each(errors, function(key, value){
                            toastr.error(value);
                        })

                        $('#form-submit').text('Send');
                        $('#form-submit').attr('disabled', false);
                    }
                })
            })
        })
    </script>
@endpush


================================================USER REGISTRATION/EMAIL UPDATE==============================================
ROUTE:
        Route::get('user/verify/{token}', [UserController::class, 'verifyUser'])->name('verify');
        Route::get('users/{user}/resend', [UserController::class, 'resendVerifyToken'])->name('resend');

VERIFY-BUTTON:--
        <a href="{{route('verify', [ 'token' => $user->verification_token])}}">   Verify</a>

CONTROLLER:
        public function verifyUser(string $token){
                $user=User::where('verification_token', $token)->firstOrFail();
                $user->verified = User::VERIFIED_USER;
                $user->verification_token = null;
                $user->save();
                return $this->successResponse('User verified successfully, 422);
            }

        public function resendVerifyToken(User $user){
                if ($user->isVerified()) {
                    return $this->successResponse('User already verified', 422);  
                }
                retry(5, function() use ($user){
                    Mail::to($user->email)->send(new UserCreated($user));
                   } , 100); 
                return $this->showMessage('An email sent to '.$user->email.' for verificaiton');
                }


UPDATE:
        if($request->has('email') && $user->email != $request->email){
            $user->verified           = User::UNVERIFIED_USER;
            $user->verification_token = User::generateVerificationCode();
            $user->email              = $request->email;
        }

----------APP-SERVICE-PROVIDER:-------------

use App\Models\User;
use App\Mail\UserCreated;
use App\Mail\UserEmailUpdated;
use Illuminate\Support\Facades\Mail;

        User::created(function($user){
           retry(5, function() use ($user){
            Mail::to($user->email)->send(new UserCreated($user));
           } , 100); 

        });

        User::updated(function($user){
            if ($user->isDirty('email')) {
                retry(5, function() use ($user){
                    Mail::to($user->email)->send(new UserEmailUpdated($user));
                }, 100);
            }

        });

---
